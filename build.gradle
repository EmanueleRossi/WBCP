apply plugin: 'org.flywaydb.flyway'
apply plugin: 'war'

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    compile (	
        [group: 'biz.paluch.logging', name: 'logstash-gelf', version: '1.7.0'], 				
        [group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.6.0'], 				
        [group: 'edu.vt.middleware', name: 'vt-password', version: '3.1.2'], 
	[group: 'javax', name: 'javaee-api', version: '7.0'], 		
        [group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'],	
        [group: 'javax.mail', name: 'javax.mail-api', version: '1.5.4'], 			
        [group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0.1'], 		
        [group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'],	
        [group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.4.4'],	        
        [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'], 		
        [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'], 
        [group: 'org.flywaydb', name: 'flyway-core', version: '3.2.1'],		
        [group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'], 	
        [group: 'org.jboss.resteasy', name: 'resteasy-jaxrs', version: '3.0.10.Final'], 
	[group: 'org.jboss.resteasy', name: 'resteasy-validator-provider-11', version: '3.0.11.Final'], 
	[group: 'org.jboss.resteasy', name: 'resteasy-client', version: '3.0.10.Final'],
        [group: 'org.mapstruct', name: 'mapstruct', version: '1.0.0.CR2'],      
        [group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.0.0.CR2']                
    )
    integrationTestCompile (
        [group: 'junit', name: 'junit', version: '4.12'],
        [group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.3'], 		
        [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.3'],         
        [group: 'org.jboss.resteasy', name: 'resteasy-jackson-provider', version: '3.0.11.Final'],
        [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.12']                       
    )    
}

sourceCompatibility = 1.8
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'WBCP',
                   'Implementation-Version': version
    }
}

flyway {
    url = 'jdbc:postgresql://localhost:5432/WBCP'
    user = 'wbcp'
    password = 'test'
}

buildscript {
    repositories {
        mavenCentral()     
    }    
    dependencies {
        classpath (            
            [group: 'org.flywaydb', name: 'flyway-gradle-plugin', version: '3.2.1'],
            [group: 'org.postgresql', name: 'postgresql', version: '9.4-1202-jdbc42']         
        )
    }
}

task deploy(dependsOn: war, type: Copy) { 
    from('build\\libs\\') { 
        include 'WBCP-1.0.war'
    }
    into 'C:\\dev\\tools\\wildfly-8.2.0.Final\\standalone\\deployments'     
    def ok=new File('C:\\dev\\tools\\wildfly-8.2.0.Final\\standalone\\deployments\\WBCP-1.0.war.deployed'); 
    def ko=new File('C:\\dev\\tools\\wildfly-8.2.0.Final\\standalone\\deployments\\WBCP-1.0.war.failed');    
    doFirst {
        if(ok.exists()) { ok.delete() }
        if(ko.exists()) { ko.delete() } 
    }    
    doLast {
        print 'Executing WildFly deploy...'
        def deployed = false
        for(def i = 0; i < 100; i++) { 
            if(ok.exists()) { deployed = true; break }
            if(ko.exists()) { break }
            sleep(500);
        } 
        if (deployed) { 
            println(' done :)') 
        } else { 
            throw new RuntimeException('Deployment failed, see WildFly log!') 
        }         
    } 
}

task integrationTest(dependsOn: ['flywayClean', 'flywayMigrate', 'deploy'], type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    includes = ['**/IntegrationTestSuite*'] as Set
}

